// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	Query(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProductService_QueryClient, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (ProductService_SayHelloClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) Query(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProductService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], "/product.ProductService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_QueryClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type productServiceQueryClient struct {
	grpc.ClientStream
}

func (x *productServiceQueryClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (ProductService_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], "/product.ProductService/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_SayHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type productServiceSayHelloClient struct {
	grpc.ClientStream
}

func (x *productServiceSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	Query(*ProductRequest, ProductService_QueryServer) error
	SayHello(*HelloRequest, ProductService_SayHelloServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) Query(*ProductRequest, ProductService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedProductServiceServer) SayHello(*HelloRequest, ProductService_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).Query(m, &productServiceQueryServer{stream})
}

type ProductService_QueryServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type productServiceQueryServer struct {
	grpc.ServerStream
}

func (x *productServiceQueryServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).SayHello(m, &productServiceSayHelloServer{stream})
}

type ProductService_SayHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type productServiceSayHelloServer struct {
	grpc.ServerStream
}

func (x *productServiceSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _ProductService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHello",
			Handler:       _ProductService_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}
